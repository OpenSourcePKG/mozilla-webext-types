import {nsISupports} from './nsISupports';
import {nsMsgKey} from './nsMsgKey';
import {nsresult} from './nsresult';

/**
 * @see https://searchfox.org/comm-central/source/mailnews/base/public/nsIMsgCopyServiceListener.idl
 */
export declare interface nsIMsgCopyServiceListener extends nsISupports {

    /**
     * Notify the observer that the message has started to be copied. This
     * method is called only once, at the beginning of a message copyoperation.
     */
    OnStartCopy(): void;

    /**
     * Notify the observer that progress as occurred for the message copy.
     * @param {number} aProgress
     * @param {number} aProgressMax
     */
    OnProgress(aProgress: number, aProgressMax: number): void;

    /**
     * Setting newly created message key. This method is tailored specifically
     * for nsIMsgCopyService::copyFileMessage() when saving Drafts/Templates.
     * We need to have a way to inform the client what's the key of the newly created message.
     */
    SetMessageKey(aKey: nsMsgKey): void;

    /**
     * Getting the file message message ID. This method is tailored
     * specifically for nsIMsgCopyService::copyFileMessage() when saving
     * Drafts/Templates. In order to work with imap server which doesn't
     * support uidplus we have to use search command to retrieve the key of
     * newly created message. Message ID generated by the compose guarantee its
     * uniqueness.
     * @param {string} aMessageId
     */
    GetMessageId(aMessageId: string): void;

    /**
     * Notify the observer that the message copied operation has completed.
     * This method is called regardless of whether the the operation was successful.
     * @param {nsresult} aStatus - Indicate whether the operation was succeeded.
     */
    OnStopCopy(aStatus: nsresult): void;

}